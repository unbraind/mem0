"""Manual migration for User, APIKey model updates and A2ATask table addition

Revision ID: manual_001
Revises: 236a819e3b88
Create Date: 2025-06-18 03:40:00.000000

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql # For JSON type if needed, though sa.JSON is generic

# revision identifiers, used by Alembic.
revision: str = 'manual_001'
down_revision: Union[str, None] = '236a819e3b88' # Assuming this is the last real migration
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Create A2ATask table
    op.create_table('a2a_tasks',
        sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('task_id', sa.String(), nullable=False),
        sa.Column('user_id', sa.UUID(), nullable=False),
        sa.Column('status', sa.Enum('SUBMITTED', 'WORKING', 'COMPLETED', 'FAILED', name='a2ataskstatus'), nullable=False),
        sa.Column('method', sa.String(), nullable=False),
        sa.Column('params', sa.JSON(), nullable=True),
        sa.Column('result', sa.JSON(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=True), # Model has default, so nullable=True is fine here
        sa.Column('updated_at', sa.DateTime(), nullable=True), # Model has default, so nullable=True is fine here
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_a2a_tasks_status'), 'a2a_tasks', ['status'], unique=False)
    op.create_index(op.f('ix_a2a_tasks_task_id'), 'a2a_tasks', ['task_id'], unique=True)
    op.create_index(op.f('ix_a2a_tasks_user_id'), 'a2a_tasks', ['user_id'], unique=False)
    # Custom indexes from model:
    op.create_index('idx_a2a_task_status_updated_at', 'a2a_tasks', ['status', 'updated_at'], unique=False)
    op.create_index('idx_a2a_task_user_created_at', 'a2a_tasks', ['user_id', 'created_at'], unique=False)


    # Modify users table
    op.add_column('users', sa.Column('username', sa.String(), server_default='temp_username', nullable=False)) # Add server_default for existing rows then alter
    op.alter_column('users', 'username', server_default=None) # Remove server default after population
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)

    # To drop user_id, we need to find the actual index name if it's not 'ix_users_user_id'
    # Assuming 'ix_users_user_id' is the convention alembic would find or was defined with.
    # This might require prior inspection of the table if the index name is different.
    # For now, proceeding with the assumption it's op.f('ix_users_user_id').
    # If 'user_id' was indexed but not with this 'op.f' pattern, this drop_index might fail or need adjustment.
    # Example: op.drop_index('some_explicit_index_name_for_user_id', table_name='users')
    try:
        # Try to drop index if it was created with op.f convention
        op.drop_index(op.f('ix_users_user_id'), table_name='users')
    except Exception as e:
        print(f"Could not drop index ix_users_user_id automatically, it might not exist or have a different name: {e}")
        # If you know the specific index name, use that:
        # op.drop_index('actual_index_name_on_user_id', table_name='users')

    op.drop_column('users', 'user_id')


    # Modify api_keys table
    # For scopes, ensure data type compatibility or handle data migration
    # Using postgresql_using for safety if there's data. For other DBs, this might differ.
    # If no data or simple cast is fine, type_=sa.JSON() might be enough.
    op.alter_column('api_keys', 'scopes',
               existing_type=sa.VARCHAR(), # Assuming it was String before
               type_=sa.JSON(),
               postgresql_using='scopes::json') # This is PostgreSQL specific for casting

    op.drop_column('api_keys', 'salt')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Add back salt to api_keys
    op.add_column('api_keys', sa.Column('salt', sa.VARCHAR(), autoincrement=False, nullable=False, server_default='')) # Provide server_default for non-nullable
    op.alter_column('api_keys', 'salt', server_default=None)

    # Revert scopes column type in api_keys
    op.alter_column('api_keys', 'scopes',
               existing_type=sa.JSON(),
               type_=sa.VARCHAR(), # Assuming it goes back to VARCHAR
               postgresql_using='scopes::text') # PostgreSQL specific for casting

    # Add back user_id to users, drop username
    op.add_column('users', sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=False, server_default='temp_user_id')) # Provide server_default
    op.alter_column('users', 'user_id', server_default=None)

    # Recreate index for user_id (assuming it was 'ix_users_user_id')
    # If it had a different name, adjust accordingly.
    try:
        op.create_index(op.f('ix_users_user_id'), 'users', ['user_id'], unique=True)
    except Exception as e:
         print(f"Could not create index ix_users_user_id automatically during downgrade: {e}")
         # op.create_index('actual_index_name_on_user_id', 'users', ['user_id'], unique=True)


    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_column('users', 'username')

    # Drop A2ATask table
    op.drop_index(op.f('ix_a2a_tasks_user_id'), table_name='a2a_tasks')
    op.drop_index(op.f('ix_a2a_tasks_task_id'), table_name='a2a_tasks')
    op.drop_index(op.f('ix_a2a_tasks_status'), table_name='a2a_tasks')
    op.drop_index('idx_a2a_task_user_created_at', table_name='a2a_tasks')
    op.drop_index('idx_a2a_task_status_updated_at', table_name='a2a_tasks')
    op.drop_table('a2a_tasks')
    # ### end Alembic commands ###
